包地址：http://golang.org/pkg/bytes/
Package bytes implements functions for the manipulation of byte slices. It is analogous to the facilities of the strings package.
bytes 包实现了操作byte slices的方法。和它类似的是strings包

func Compare(a, b []byte) int
  Compare returns an integer comparing two byte slices lexicographically. The result will be 0 if a==b, -1 if a < b, and +1 if a > b. A nil argument is equivalent to an empty slice.
  对比两个byte slices 返回整型对比结果。如果a==b返回0,如果a<b返回-1,如果a>b返回+1。nil参数等价于空的slice

func Contains(b, subslice []byte) bool
  Contains returns whether subslice is within b.
  Contains 返回subslice（切片）是否存在b
  
func Count(s, sep []byte) int
  Count counts the number of non-overlapping instances of sep in s.
  Count 统计s里不重复的sep的数量
  
func Equal(a, b []byte) bool
  Equal returns a boolean reporting whether a == b. A nil argument is equivalent to an empty slice.
  Equal返回a是否等b的布尔类型。nil参数相当于空slice

func EqualFold(s, t []byte) bool
  EqualFold reports whether s and t, interpreted as UTF-8 strings, are equal under Unicode case-folding.
  EqualFold t 从 s 截断看是不是对等的

func Fields(s []byte) [][]byte
  Fields splits the slice s around each instance of one or more consecutive white space characters, returning a slice of subslices of s or an empty list if s contains only white space.
  Fields 通过一个或多个连续的空格符 分割slice s，返回s的子切片，如果s只有空格符那返回空列
  
func FieldsFunc(s []byte, f func(rune) bool) [][]byte
  FieldsFunc interprets s as a sequence of UTF-8-encoded Unicode code points. It splits the slice s at each run of code points c satisfying f(c) and returns a slice of subslices of s. If no code points in s satisfy f(c), an empty slice is returned.
  FieldsFunc 根据utf编码的代码点排序s。它根据函数f 分割s，返回多个s的子切片。如果f里没有s的代码点，返回一个空slice

func HasPrefix(s, prefix []byte) bool
  HasPrefix tests whether the byte slice s begins with prefix。.
  HasPrefix 检查s的开头是不是prefix

func HasSuffix(s, suffix []byte) bool
  HasSuffix tests whether the byte slice s ends with suffix.
  HasSuffix 检查s是不是以suffix结束的

func Index(s, sep []byte) int
  Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.
  Index返回sep在s里的索引，如果sep没有在s里返回-1

func IndexAny(s []byte, chars string) int
  IndexAny interprets s as a sequence of UTF-8-encoded Unicode code points. It returns the byte index of the first occurrence in s of any of the Unicode code points in chars. It returns -1 if chars is empty or if there is no code point in common.
  IndexAny S是一个utf8 序列的代码店。

func IndexByte(s []byte, c byte) int
func IndexFunc(s []byte, f func(r rune) bool) int
func IndexRune(s []byte, r rune) int
func Join(s [][]byte, sep []byte) []byte
func LastIndex(s, sep []byte) int
func LastIndexAny(s []byte, chars string) int
func LastIndexFunc(s []byte, f func(r rune) bool) int
func Map(mapping func(r rune) rune, s []byte) []byte
func Repeat(b []byte, count int) []byte
func Replace(s, old, new []byte, n int) []byte
func Runes(s []byte) []rune
func Split(s, sep []byte) [][]byte
func SplitAfter(s, sep []byte) [][]byte
func SplitAfterN(s, sep []byte, n int) [][]byte
func SplitN(s, sep []byte, n int) [][]byte
func Title(s []byte) []byte
func ToLower(s []byte) []byte
func ToLowerSpecial(_case unicode.SpecialCase, s []byte) []byte
func ToTitle(s []byte) []byte
func ToTitleSpecial(_case unicode.SpecialCase, s []byte) []byte
func ToUpper(s []byte) []byte
func ToUpperSpecial(_case unicode.SpecialCase, s []byte) []byte
func Trim(s []byte, cutset string) []byte
func TrimFunc(s []byte, f func(r rune) bool) []byte
func TrimLeft(s []byte, cutset string) []byte
func TrimLeftFunc(s []byte, f func(r rune) bool) []byte
func TrimPrefix(s, prefix []byte) []byte
func TrimRight(s []byte, cutset string) []byte
func TrimRightFunc(s []byte, f func(r rune) bool) []byte
func TrimSpace(s []byte) []byte
func TrimSuffix(s, suffix []byte) []byte
type Buffer
    func NewBuffer(buf []byte) *Buffer
    func NewBufferString(s string) *Buffer
    func (b *Buffer) Bytes() []byte
    func (b *Buffer) Grow(n int)
    func (b *Buffer) Len() int
    func (b *Buffer) Next(n int) []byte
    func (b *Buffer) Read(p []byte) (n int, err error)
    func (b *Buffer) ReadByte() (c byte, err error)
    func (b *Buffer) ReadBytes(delim byte) (line []byte, err error)
    func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error)
    func (b *Buffer) ReadRune() (r rune, size int, err error)
    func (b *Buffer) ReadString(delim byte) (line string, err error)
    func (b *Buffer) Reset()
    func (b *Buffer) String() string
    func (b *Buffer) Truncate(n int)
    func (b *Buffer) UnreadByte() error
    func (b *Buffer) UnreadRune() error
    func (b *Buffer) Write(p []byte) (n int, err error)
    func (b *Buffer) WriteByte(c byte) error
    func (b *Buffer) WriteRune(r rune) (n int, err error)
    func (b *Buffer) WriteString(s string) (n int, err error)
    func (b *Buffer) WriteTo(w io.Writer) (n int64, err error)
type Reader
    func NewReader(b []byte) *Reader
    func (r *Reader) Len() int
    func (r *Reader) Read(b []byte) (n int, err error)
    func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)
    func (r *Reader) ReadByte() (b byte, err error)
    func (r *Reader) ReadRune() (ch rune, size int, err error)
    func (r *Reader) Seek(offset int64, whence int) (int64, error)
    func (r *Reader) UnreadByte() error
    func (r *Reader) UnreadRune() error
    func (r *Reader) WriteTo(w io.Writer) (n int64, err error)
