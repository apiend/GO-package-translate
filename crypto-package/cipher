包地址：http://golang.org/pkg/crypto/cipher/
Package cipher implements standard block cipher modes that can be wrapped around low-level block cipher implementations. See http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html and NIST Special Publication 800-38A.
cipher实现分组密码模式包含低级的加密算法实现的标准。看 http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html  和 NIST特别出版物800-38A

type Block
  type Block interface {
        // BlockSize returns the cipher's block size.返回块大小
        BlockSize() int

        // Encrypt encrypts the first block in src into dst.加密src的第一个块到dst
        // Dst and src may point at the same memory.
        Encrypt(dst, src []byte)

        // Decrypt decrypts the first block in src into dst. 解密src第一个块到dst
        // Dst and src may point at the same memory.Dst和src也许会指向同样的内存
        Decrypt(dst, src []byte)
}
  A Block represents an implementation of block cipher using a given key. It provides the capability to encrypt or decrypt individual blocks. The mode implementations extend that capability to streams of blocks.
  使用给定的key实现块的cipher。它提供加密和解密块的能力。实现扩展流的块的能力
  
type BlockMode
  type BlockMode interface {
        // BlockSize returns the mode's block size.
        BlockSize() int

        // CryptBlocks encrypts or decrypts a number of blocks. The length of
        // src must be a multiple of the block size. Dst and src may point to
        // the same memory.
        CryptBlocks(dst, src []byte)
}
  A BlockMode represents a block cipher running in a block-based mode (CBC, ECB etc).
  基于块模式的块密码 (CBC, ECB etc).。

    func NewCBCDecrypter(b Block, iv []byte) BlockMode
      NewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size and must match the iv used to encrypt the data.
      使用给定的Block解密返回密码链接模式的BlockMode,iv的长度和Block的大小一样，iv必须配置解密数据
      例子链接：http://golang.org/pkg/crypto/cipher/#example_NewCBCDecrypter
      
    func NewCBCEncrypter(b Block, iv []byte) BlockMode
      NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size.
      使用给定的Block加密返回密码链接模式的BlockMode,iv的长度和Block的大小一样
      例子链接：http://golang.org/pkg/crypto/cipher/#example_NewCBCEncrypter
    
type Stream
  type Stream interface {
        // XORKeyStream XORs each byte in the given slice with a byte from the
        // cipher's key stream. Dst and src may point to the same memory.
        XORKeyStream(dst, src []byte)
  }
  A Stream represents a stream cipher.
  密码流

    func NewCFBDecrypter(block Block, iv []byte) Stream
      NewCFBDecrypter returns a Stream which decrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size.
      使用给定的Block加密返回密码反馈模式的BlockMode,iv的长度和Block的大小一样
    
    func NewCFBEncrypter(block Block, iv []byte) Stream
      NewCFBEncrypter returns a Stream which encrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size.
      使用给定的Block解密返回密码反馈模式的BlockMode,iv的长度和Block的大小一样
      
    func NewCTR(block Block, iv []byte) Stream
      NewCTR returns a Stream which encrypts/decrypts using the given Block in counter mode. The length of iv must be the same as the Block's block size.
      使用给定的Block加密/解密 返回 计数器模式 的 流，iv的长度和Block的大小一样
      
    func NewOFB(b Block, iv []byte) Stream
      NewOFB returns a Stream that encrypts or decrypts using the block cipher b in output feedback mode. The initialization vector iv's length must be equal to b's block size
      使用给定的Block加密/解密 返回 输出计数器模式 的 流。iv的长度和Block的大小一样
    
type StreamReader
  type StreamReader struct {
        S Stream
        R io.Reader
  }
  StreamReader wraps a Stream into an io.Reader. It calls XORKeyStream to process each slice of data which passes through.
  包装一个流成为io.Reader.调用XORKeyStream 处理每个符合的切片数据

  func (r StreamReader) Read(dst []byte) (n int, err error)
    
    
type StreamWriter
  type StreamWriter struct {
        S   Stream
        W   io.Writer
        Err error // unused
  }
  StreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream to process each slice of data which passes through. If any Write call returns short then the StreamWriter is out of sync and must be discarded.
  包装一个流成为io.Writer。调用XORKeyStream 处理每个符合的切片数据.如果任何Write调用返回和StreamWriter不同步，就必须丢弃。

    func (w StreamWriter) Close() error
    func (w StreamWriter) Write(src []byte) (n int, err error)
    
    
Package files
包文件
cbc.go cfb.go cipher.go ctr.go io.go ofb.go
