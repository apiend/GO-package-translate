包地址：http://golang.org/pkg/container/heap/

Package heap provides heap operations for any type that implements heap.Interface. A heap is a tree with the property that each node is the minimum-valued node in its subtree.
包堆提供任何能实现堆的类型的操作。堆是一个优先最低值子树节点的树
A heap is a common way to implement a priority queue. To build a priority queue, implement the Heap interface with the (negative) priority as the ordering for the Less method, so Push adds items while Pop removes the highest-priority item from the queue. The Examples include such an implementation; the file example_pq_test.go has the complete source. 
一个堆是一个实现优先队列的常用方法。建立一个优先队列，实现堆接口的顺序减。所以队列 push一个项会 删除最高优先的项。例子包含实现。example_pq_test.go有所有的源码

func Init(h Interface)
   A heap must be initialized before any of the heap operations can be used. Init is idempotent with respect to the heap invariants and may be called whenever the heap invariants may have been invalidated. Its complexity is O(n) where n = h.Len(). 
   堆必须在任何使用堆操作之前初始化。初始化是不变的幂等，每当不变的失效会变调用。时间复杂度 O(n)

func Pop(h Interface) interface{}
  Pop removes the minimum element (according to Less) from the heap and returns it. The complexity is O(log(n)) where n = h.Len(). Same as Remove(h, 0). 
  Pop从heap删除最低的元素（根据减）然后返回它。时间复杂度O(log(n))， n = h.Len()。和Remove(h, 0)一样。
    
func Push(h Interface, x interface{})
  Push pushes the element x onto the heap. The complexity is O(log(n)) where n = h.Len(). 
  往堆里push元素x。复杂度是 O(log(n)) ， n = h.Len()。

func Remove(h Interface, i int) interface{}
   Remove removes the element at index i from the heap. The complexity is O(log(n)) where n = h.Len(). 
   根据索引i删除堆的元素。复杂是O(log(n)) ， n = h.Len(). 

type Interface
  type Interface interface {
          sort.Interface
          Push(x interface{}) // add x as element Len()
          Pop() interface{}   // remove and return element Len() - 1.
  }
  Any type that implements heap.Interface may be used as a min-heap with the following invariants (established after Init has been called or if the data is empty or sorted): 
  !h.Less(j, i) for 0 <= i < h.Len() and j = 2*i+1 or 2*i+2 and j < h.Len()
  Note that Push and Pop in this interface are for package heap's implementation to call. To add and remove things from the heap, use heap.Push and heap.Pop. 
  
