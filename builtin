包地址：http://golang.org/pkg/builtin/
Package builtin provides documentation for Go's predeclared identifiers.The items documented here are not actually in package builtin but their descriptions here allow godoc to present documentation for the language's special identifiers.
builtin包提供GO的预先声明标识符文档。这里的文档实际上没有都在builtin包里。但是他们描述了 允许在现有的文档里的 特殊语言标识符

Constants 常量
  const (
          true  = 0 == 0 // Untyped bool.
          false = 0 != 0 // Untyped bool.
  )
  const iota = 0 // Untyped int.
    iota is a predeclared identifier representing the untyped integer ordinal number of the current const specification in a (usually parenthesized) const declaration. It is zero-indexed.
    iota是一个预定义的无符号的int类型，用于常量声明。默认是0。（看下语法书会有说明的）
    
func append(slice []Type, elems ...Type) []Type
  The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated. Append returns the updated slice. It is therefore necessary to store the result of append, often in the variable holding the slice itself:
  从切换末尾加入切片。如果有足够大小，旧切片最终会有一个新的元素。如果没有足够大小。会申请一个新的底层数组。append返回新的切片。因此需要存储append的结果，通常是切片本身是个变量。
  
func close(c chan<- Type)
  The close built-in function closes a channel, which must be either bidirectional or send-only. It should be executed only by the sender, never the receiver, and has the effect of shutting down the channel after the last sent value is received. After the last value has been received from a closed channel c, any receive from c will succeed without blocking, returning the zero value for the channel element. The form
  内置函数close 关闭一个双向的或只发送的channel。它应该是执行过的发送者，在最后发送的值被接收之后再关闭。
  
func delete(m map[Type]Type1, key Type)
  The delete built-in function deletes the element with the specified key (m[key]) from the map. If m is nil or there is no such element, delete is a no-op.
  内置函数delete是用来删除map的元素的，通过 key来删除,delete(m[key])。 如果m是空的或者没有这个元素，delete是一个空操作
  
func panic(v interface{})
  The panic built-in function stops normal execution of the current goroutine. When a function F calls panic, normal execution of F stops immediately. Any functions whose execution was deferred by F are run in the usual way, and then F returns to its caller. To the caller G, the invocation of F then behaves like a call to panic, terminating G's execution and running any deferred functions. This continues until all functions in the executing goroutine have stopped, in reverse order. At that point, the program is terminated and the error condition is reported, including the value of the argument to panic. This termination sequence is called panicking and can be controlled by the built-in function recover.
  内置函数panic 用来停止正常执行的当前并发。当一个函数F调用panic，F的执行就立即停止。任何F中的延迟函数会正常执行，然后F返回调用者。调用者G，调用了F就相当于调用panic。停止G的执行然后运行任何延迟的函数。这个过程是倒序的直到所有的并发函数停止。这时，程序会终止，会报告错误条件，包括参数值的panic。这个终止的序列被成为恐慌，能被内置函数recover操作。

func recover() interface{}
  The recover built-in function allows a program to manage behavior of a panicking goroutine. Executing a call to recover inside a deferred function (but not any function called by it) stops the panicking sequence by restoring normal execution and retrieves the error value passed to the call of panic. If recover is called outside the deferred function it will not stop a panicking sequence. In this case, or when the goroutine is not panicking, or if the argument supplied to panic was nil, recover returns nil. Thus the return value from recover reports whether the goroutine is panicking.
  内置函数recover 允许程序管理恐慌goroutine的行为。在延迟函数里调用revcoer停止恐慌序列，恢复正常的流程，取回错误的值传给调用的panic。如果revocer不是在延迟函数里调用的，它不会停止恐慌。在这种情况下，或者goroutine没有恐慌，或者如果提供给panic的参数是nil，recover返回nil。因此recover的返回值和goroutine是不是恐慌无关。

type ComplexType
  ComplexType is here for the purposes of documentation only. It is a stand-in for either complex type: complex64 or complex128.
  ComplexType在这里只是做为一个文档。它是complex type的别名：complex64 或complex128。
  
  func complex(r, i FloatType) ComplexType
    The complex built-in function constructs a complex value from two floating-point values. The real and imaginary parts must be of the same size, either float32 or float64 (or assignable to them), and the return value will be the corresponding complex type (complex64 for float32, complex128 for float64).
    内置函数complex通过两个浮点类型的值构造复合值。实数和虚数部分必须是相同的大小，不管是float32 还是float64 。返回值应该是对应的complex 类型（complex64 对应 float32, complex128 对应 float64)）
    
type FloatType
  FloatType is here for the purposes of documentation only. It is a stand-in for either float type: float32 or float64.
  FloatType在这里只是做为一个文档。是float 类型的别名： float32 或者 float64。
  
  func imag(c ComplexType) FloatType
    The imag built-in function returns the imaginary part of the complex number c. The return value will be floating point type corresponding to the type of c.
    内置函数imag 返回c的 虚数部分。返回值的类型对应c的类型 (complex64 for float32, complex128 for float64).
  func real(c ComplexType) FloatType
    The real built-in function returns the real pa返回值的类型对应c的类型 (complex64 for float32, complex128 for float64).rt of the complex number c. The return value will be floating point type corresponding to the type of c.
    内置函数real返回c的实数部分。返回值的类型对应c的类型 (complex64 for float32, complex128 for float64).
type IntegerType
  IntegerType is here for the purposes of documentation only. It is a stand-in for any integer type: int, uint, int8 etc.
  是任何integer类型的别名。
  
type Type
  Type is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation
  做为文档使用。任何GO的类型的别名。任何调用函数相同的类型。
  
  func make(Type, size IntegerType) Type
    The make built-in function allocates and initializes an object of type slice, map, or chan (only). Like new, the first argument is a type, not a value. Unlike new, make's return type is the same as the type of its argument, not a pointer to it. The specification of the result depends on the type:
    内置函数make分配和初始化 slice、map、chan对象。和new相同的是第一个参数是类型，不是值。和new不同的是make的返回值和参数的类型是一样的，不是一个指针。结果依赖参数的类型
  func new(Type) *Type
    The new built-in function allocates memory. The first argument is a type, not a value, and the value returned is a pointer to a newly allocated zero value of that type.
    内置函数new分配内存。第一个参数和类型不是值。返回值是一个指向新分配的0值的参数的类型的指针（就是指针指向的类型是第一个参数的类型）。
    
type Type1
  Type1 is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation.
  做为文档使用。任何GO的类型的别名。和任何调用函数相同的类型。

type bool
  bool is the set of boolean values, true and false.
  布尔类型的值，true和false

type byte
  byte is an alias for uint8 and is equivalent to uint8 in all ways. It is used, by convention, to distinguish byte values from 8-bit unsigned integer values.
  byte 是uint8的别名，在各个方面都等价于uint8。它的使用，按照惯例 区别于byte值 是8字节的无符号类型的integer 值。

type complex128
  complex128 is the set of all complex numbers with float64 real and imaginary parts.
  complex128 设置所有的复合类型的实数和虚数部分都是float64
  
type complex64
  complex64 is the set of all complex numbers with float32 real and imaginary parts.
  complex64 设置所有的复合类型的实数和虚数部分都是float32
  
type error
  The error built-in interface type is the conventional interface for representing an error condition, with the nil value representing no error.
  内置函数error是一个常规的代表错误条件的接口，nil 表示没有错误

type float32
  float32 is the set of all IEEE-754 32-bit floating-point numbers.
  设置所有的IEEE-754 32位浮点类型
  
type float64
  float64 is the set of all IEEE-754 64-bit floating-point numbers.
  设置所有的IEEE-754 64位浮点类型

type int
  int is a signed integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, int32.
  int 是带符号的至少32位大小的整数。它是一个独特的类型，别名不是int32
  
  func cap(v Type) int
    The cap built-in function returns the capacity of v, according to its type:
    内置函数cap 返回v的容量。根据其类型：
    Array: the number of elements in v (same as len(v)).
    Pointer to array: the number of elements in *v (same as len(v)).
    Slice: the maximum length the slice can reach when resliced;
    if v is nil, cap(v) is zero.
    Channel: the channel buffer capacity, in units of elements;
    if v is nil, cap(v) is zero.
    
  func copy(dst, src []Type) int
    The copy built-in function copies elements from a source slice into a destination slice. (As a special case, it also will copy bytes from a string to a slice of bytes.) The source and destination may overlap. Copy returns the number of elements copied, which will be the minimum of len(src) and len(dst).
    内置函数copy 从来源slice复制元素到目标slice。（特殊情况下，它也会从从string复制到byte slice）来源和目标也许会是一样的。copy返回拷贝的元素数量，是src长度和dst长度的最小值
  
  func len(v Type) int
    The len built-in function returns the length of v, according to its type:
    内置函数len返回v的长度
    Array: the number of elements in v.
    Pointer to array: the number of elements in *v (even if v is nil).
    Slice, or map: the number of elements in v; if v is nil, len(v) is zero.
    String: the number of bytes in v.
    Channel: the number of elements queued (unread) in the channel buffer;
    if v is nil, len(v) is zero.

type int16
  int16 is the set of all signed 16-bit integers. Range: -32768 through 32767.
  int16 设置所有的带符号的16位整数。从-32768到32767
  
type int32
  int32 is the set of all signed 32-bit integers. Range: -2147483648 through 2147483647.
  int32 设置所有的带符号的32位整数。从-2147483648到2147483647

type int64
  int64 is the set of all signed 64-bit integers. Range: -9223372036854775808 through 9223372036854775807.
  int64 设置所有的带符号的64位整数。从-9223372036854775808到9223372036854775807。

type int8
  int8 is the set of all signed 8-bit integers. Range: -128 through 127.
  int8 设置所有的带符号的8位整数。从-128到127。

type rune
  rune is an alias for int32 and is equivalent to int32 in all ways. It is used, by convention, to distinguish character values from integer values.
  rune是int32的别名，在任何地方使用就相当于int32。按照惯例使用 区别 整型值和字符值。

type string
  string is the set of all strings of 8-bit bytes, conventionally but not necessarily representing UTF-8-encoded text. A string may be empty, but not nil. Values of string type are immutable.
  设置所有字符串 8位字节，通常但不是一定要 uTF8文本。一个字符串可能是空的，但是不会是nil。字符串类型的值是不可改变的
  
type uint
  uint is an unsigned integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, uint32.
  uint 是无符号的至少32位大小的整数。它是一个独特的类型，不是uint32的别名

type uint16
  uint16 is the set of all unsigned 16-bit integers. Range: 0 through 65535.
  值范围是0到65535

type uint32
  uint32 is the set of all unsigned 32-bit integers. Range: 0 through 4294967295.
  值范围是0到4294967295

type uint64
  uint64 is the set of all unsigned 64-bit integers. Range: 0 through 18446744073709551615
  值范围是0到18446744073709551615

type uint8
  uint8 is the set of all unsigned 8-bit integers. Range: 0 through 255.
  值范围是0到255

type uintptr
  uintptr is an integer type that is large enough to hold the bit pattern of any pointer.
  uintptr 是一个足够保存任何位模式的指针的整数类型
  
